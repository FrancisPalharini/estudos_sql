Seção Meu Drive simplificada com atalhos … 
Nas próximas semanas, os itens presentes em mais de uma pasta serão substituídos por atalhos. O acesso a pastas e arquivos não mudará.Saiba mais
LISTA EXERCÍCIOS - PROGRAMAÇÃO AVANÇADA DE BANCO DE DADOS - 2/2021
FRANCIS CRISTINA MANZANO PALHARINI

1 - CONSTRUIR UMA FUNCTION QUE RECEBA  COMO PARÂMETROS O ID DO 
FUNCIONÁRIO E O VALOR DA DATA DE DESLIGAMENTO, VERIFICAR:
- SE O FUNCIONÁRIO EXISTE, SE NÃO EXISITIR RETORNAR O CÓDIGO -9999.
- SE O FUNCIONÁRIO EXISTIR, VERIFICAR SE O FUNCIONÁRIO JÁ TEM DATA DE 
DESLIGAMENTO, SE JÁ TIVER RETORNAR O CÓDIGO -9998.
- SE O FUNCIONÁRIO EXISTIR E NÃO TIVER A DATA DE DELIGAMENTO JÁ DEFINIDA,
FAZER O UPDATE NO REGISTRO E RETORNAR O VALOR ZERO (0), PARA INDICAR QUE 
O PROCESSO DE DESLIGAMENTO FOI BEM SUCEDIDO.
- O NOME DA FUNCTION DEVE SER FUNC_DESLIGAFUNCIONARIO.
- DEVE SER USADO O TRATAMENTO DE EXCEPTION OTHERS, ONDE DEVE SER RETORNADO O 
VALOR DO ERRO DO SQLCODE, CASO A EXECUÇÃO SEJA DESVIADA PARA O EXCEPTION.


create or replace function FUNC_DESLIGAFUNCIONARIO (p_id_func in number, p_data_desligamento in date)
return number 
    is 
        RETORNO NUMBER(4);
        V_QTDE NUMBER(1);
    BEGIN
        SELECT COUNT(*) INTO V_QTDE FROM FUNCIONARIO WHERE ID_FUNC=p_id_func;
        IF V_QTDE = 1 THEN
            SELECT COUNT(*) INTO V_QTDE FROM FUNCIONARIO WHERE ID_FUNC = p_id_func AND DATA_DESLIGAMENTO IS NULL;
            IF V_QTDE = 1 THEN
                UPDATE FUNCIONARIO SET DATA_DESLIGAMENTO= p_data_desligamento WHERE ID_FUNC=p_id_func;
                RETORNO:= 0; -- DEU CERTO 
            ELSE
                RETORNO := -9998; -- FUNC JA TEM DATA_DELISGAMENTO
            END IF;

        ELSE
            RETORNO := -9999; -- FUNC NÃO EXISTE
        END IF;





        COMMIT;
        RETURN RETORNO;



    EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    RETURN SQLCODE;
    

    END;

-------------------------------------------------
CREATE TABLE LOG_FUNCIONARIO(
    ID_LOG NUMBER PRIMARY KEY,
    ID_FUNC NUMBER(5) NOT NULL,
    SALARIO_ANTIGO NUMBER(10,2),
    SALARIO_NOVO NUMBER(10,2),
    DATA_HORA DATE NOT NULL,
    USUARIO VARCHAR2(30)
);


CREATE SEQUENCE SEQ_LOG_FUNCIONARIO
NOCACHE
NOCYCLE;

2 - CONSTRUIR UMA TABELA DE LOG DE REGISTO PARA A COLUNA SALARIO DA 
TABELA FUNCIONÁRIO, TENDO UMA COLUNA PARA O ID DO LOG, UMA COLUNA PARA O 
ID DO FUNCIONÁRIO, UMA COLUNA PARA O SALARIO ANTIGO, UMA COLUNA PARA O SALARIO 
NOVO, UMA COLUNA PARA A DATA E HORA DO REGISTROS E UMA COLUNA PARA O NOME DO
USUÁRIO.
CRIAR UMA TRIGGUER QUE MONITORE O UPDATE NA COLUNA SALARIO, ONDE TODAS AS ALTERAÇÕES
BEM SUCEDIDAS DO VALOR DO SALÁRIO DEVE FICAR REGISTRADAS NO LOG.


CREATE OR REPLACE TRIGGER TRG_LOG_SALARIO_FUNC
BEFORE UPDATE OF SALARIO ON FUNCIONARIO
FOR EACH ROW
    DECLARE
        
    BEGIN
    

    INSERT INTO LOG_FUNCIONARIO (   ID_LOG ,
                                    ID_FUNC ,
                                    SALARIO_ANTIGO ,
                                    SALARIO_NOVO ,
                                    DATA_HORA ,
                                    USUARIO)
        VALUES( SEQ_LOG_FUNCIONARIO.NEXTVAL,
                :OLD.ID_FUNC, 
                :OLD.SALARIO, 
                :NEW.SALARIO,
                SYSDATE,
                USER);

END;
